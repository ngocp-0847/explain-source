use crate::database::Database;
use crate::log_normalizer::LogNormalizer;
use crate::message_store::MsgStore;
use crate::{CodeAnalysisRequest, CodeAnalysisResponse};
use anyhow::Result;
use std::sync::Arc;
use tokio::io::{AsyncBufReadExt, BufReader};
use tokio::process::Command;
use tokio::time::{sleep, Duration};
use tracing::{error, info};

#[derive(Debug)]
pub struct CursorAgent;

impl CursorAgent {
    pub fn new() -> Self {
        Self
    }

    pub async fn analyze_code(
        &self,
        request: CodeAnalysisRequest,
        msg_store: Arc<MsgStore>,
        database: Arc<Database>,
    ) -> Result<CodeAnalysisResponse> {
        info!("üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch code cho ticket: {}", request.ticket_id);

        // Create analysis session in database
        let session_id = database.create_session(&request.ticket_id).await?;

        // Update ticket status to analyzing
        database
            .update_ticket_analyzing(&request.ticket_id, true)
            .await?;

        let mut logs = Vec::new();
        let normalizer = LogNormalizer::new();

        // Send initial log
        let start_log = "üîÑ Kh·ªüi ƒë·ªông Cursor Agent...";
        let entry = normalizer.normalize(
            start_log.to_string(),
            request.ticket_id.clone(),
        );
        msg_store.push(entry).await;
        logs.push(start_log.to_string());

        // Execute Cursor Agent analysis
        let result = match self
            .execute_cursor_agent(&request, &msg_store, &normalizer)
            .await
        {
            Ok(output) => {
                info!("‚úÖ Cursor Agent ho√†n th√†nh ph√¢n t√≠ch");

                // Send completion log
                let completion_log = "‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t!";
                let entry = normalizer.normalize(
                    completion_log.to_string(),
                    request.ticket_id.clone(),
                );
                msg_store.push(entry).await;
                logs.push(completion_log.to_string());

                // Update database with success
                database.complete_session(&session_id, "Success").await?;
                database
                    .update_ticket_result(&request.ticket_id, &output)
                    .await?;

                output
            }
            Err(e) => {
                error!("‚ùå L·ªói khi th·ª±c thi Cursor Agent: {}", e);

                // Send error log
                let error_log = format!("‚ùå L·ªói: {}", e);
                let entry = normalizer.normalize(error_log.clone(), request.ticket_id.clone());
                msg_store.push(entry).await;
                logs.push(error_log);

                // Update database with failure
                database.fail_session(&session_id, &e.to_string()).await?;
                database
                    .update_ticket_analyzing(&request.ticket_id, false)
                    .await?;

                format!("Kh√¥ng th·ªÉ ph√¢n t√≠ch code do l·ªói: {}", e)
            }
        };

        Ok(CodeAnalysisResponse {
            ticket_id: request.ticket_id,
            result,
            logs,
            success: true,
        })
    }

    async fn execute_cursor_agent(
        &self,
        request: &CodeAnalysisRequest,
        msg_store: &Arc<MsgStore>,
        normalizer: &LogNormalizer,
    ) -> Result<String> {
        // For now, we'll simulate the Cursor Agent with realistic logging
        // In production, this would spawn an actual Cursor Agent process
        // and capture its stdout/stderr

        info!("üéØ Executing analysis for: {}", request.code_context);

        // Simulate analysis steps with realistic logs
        let analysis_steps = self.simulate_cursor_agent_analysis(request, msg_store, normalizer).await;

        Ok(analysis_steps)
    }

    async fn simulate_cursor_agent_analysis(
        &self,
        request: &CodeAnalysisRequest,
        msg_store: &Arc<MsgStore>,
        normalizer: &LogNormalizer,
    ) -> String {
        let ticket_id = request.ticket_id.clone();

        // Step 1: Initialize
        self.stream_log(
            "üîç Kh·ªüi t·∫°o ph√¢n t√≠ch code...",
            &ticket_id,
            msg_store,
            normalizer,
        )
        .await;
        sleep(Duration::from_millis(500)).await;

        // Step 2: Reading file
        let file_log = format!("üìÇ Reading file: {}", request.code_context);
        self.stream_log(&file_log, &ticket_id, msg_store, normalizer)
            .await;
        sleep(Duration::from_millis(800)).await;

        // Step 3: Analyzing code structure
        self.stream_log(
            "üîß Using tool: code_analyzer",
            &ticket_id,
            msg_store,
            normalizer,
        )
        .await;
        sleep(Duration::from_millis(600)).await;

        self.stream_log(
            "üèóÔ∏è  Analyzing code structure and dependencies...",
            &ticket_id,
            msg_store,
            normalizer,
        )
        .await;
        sleep(Duration::from_millis(1000)).await;

        // Step 4: Business flow analysis
        self.stream_log(
            "üíº Analysis: Extracting business flow patterns...",
            &ticket_id,
            msg_store,
            normalizer,
        )
        .await;
        sleep(Duration::from_millis(800)).await;

        // Step 5: Finding key components
        self.stream_log(
            "üîç Found: 5 key functions and 3 data flow paths",
            &ticket_id,
            msg_store,
            normalizer,
        )
        .await;
        sleep(Duration::from_millis(600)).await;

        // Step 6: Test case generation
        self.stream_log(
            "üìù Generating test case recommendations...",
            &ticket_id,
            msg_store,
            normalizer,
        )
        .await;
        sleep(Duration::from_millis(700)).await;

        // Step 7: Final summary
        self.stream_log(
            "‚ú® Summary: Analysis complete with 12 findings",
            &ticket_id,
            msg_store,
            normalizer,
        )
        .await;
        sleep(Duration::from_millis(500)).await;

        // Generate comprehensive analysis result based on context
        self.generate_analysis_result(request)
    }

    async fn stream_log(
        &self,
        message: &str,
        ticket_id: &str,
        msg_store: &Arc<MsgStore>,
        normalizer: &LogNormalizer,
    ) {
        let entry = normalizer.normalize(message.to_string(), ticket_id.to_string());
        msg_store.push(entry).await;
    }

    fn generate_analysis_result(&self, request: &CodeAnalysisRequest) -> String {
        match request.code_context.as_str() {
            "auth/login.js" => {
                format!(
                    r#"
## üîê Ph√¢n t√≠ch Business Flow: ƒêƒÉng nh·∫≠p User

### 1. Flow ch√≠nh:
1. **Input Validation**: Ki·ªÉm tra email/password format
2. **Authentication**: G·ªçi API x√°c th·ª±c v·ªõi backend
3. **Session Management**: T·∫°o session v√† l∆∞u token
4. **Redirect**: Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dashboard

### 2. C√°c ƒëi·ªÉm quan tr·ªçng cho QA:
- **Validation Rules**: Email ph·∫£i ƒë√∫ng format, password t·ªëi thi·ªÉu 8 k√Ω t·ª±
- **Error Handling**: X·ª≠ l√Ω l·ªói network, invalid credentials
- **Security**: Token ƒë∆∞·ª£c l∆∞u trong httpOnly cookie
- **Loading States**: Hi·ªÉn th·ªã spinner trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p

### 3. Test Cases c·∫ßn ki·ªÉm tra:
‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi credentials h·ª£p l·ªá
‚úÖ ƒêƒÉng nh·∫≠p th·∫•t b·∫°i v·ªõi credentials sai
‚úÖ X·ª≠ l√Ω l·ªói network timeout
‚úÖ Validation input kh√¥ng h·ª£p l·ªá
‚úÖ Remember me functionality
‚úÖ Session expiry handling

### 4. Code Flow:
```
LoginForm ‚Üí validateInput() ‚Üí callAuthAPI() ‚Üí saveSession() ‚Üí redirect()
```

### 5. C√°c API Endpoints:
- POST /api/auth/login
- POST /api/auth/refresh-token
- POST /api/auth/logout

**Ticket ID**: {}
"#,
                    request.ticket_id
                )
            }
            "api/payment.js" => {
                format!(
                    r#"
## üí≥ Ph√¢n t√≠ch Business Flow: Thanh to√°n

### 1. Flow ch√≠nh:
1. **Payment Initiation**: Kh·ªüi t·∫°o giao d·ªãch thanh to√°n
2. **Payment Gateway**: K·∫øt n·ªëi v·ªõi c·ªïng thanh to√°n (Stripe/PayPal)
3. **Transaction Processing**: X·ª≠ l√Ω giao d·ªãch
4. **Confirmation**: X√°c nh·∫≠n k·∫øt qu·∫£ thanh to√°n
5. **Notification**: G·ª≠i email/SMS x√°c nh·∫≠n

### 2. C√°c ƒëi·ªÉm quan tr·ªçng cho QA:
- **Payment Methods**: H·ªó tr·ª£ credit card, bank transfer, e-wallet
- **Security**: M√£ h√≥a th√¥ng tin th·∫ª, PCI compliance
- **Error Handling**: X·ª≠ l√Ω l·ªói thanh to√°n, timeout
- **Audit Trail**: Log t·∫•t c·∫£ giao d·ªãch
- **Idempotency**: ƒê·∫£m b·∫£o kh√¥ng double charge

### 3. Test Cases c·∫ßn ki·ªÉm tra:
‚úÖ Thanh to√°n th√†nh c√¥ng v·ªõi card h·ª£p l·ªá
‚úÖ Thanh to√°n th·∫•t b·∫°i (insufficient funds)
‚úÖ Timeout payment gateway (retry logic)
‚úÖ Invalid payment method
‚úÖ Currency conversion (n·∫øu c√≥)
‚úÖ Refund process
‚úÖ Webhook handling cho payment confirmation

### 4. Code Flow:
```
PaymentForm ‚Üí validatePayment() ‚Üí callGateway() ‚Üí
processTransaction() ‚Üí confirmPayment() ‚Üí sendNotification()
```

### 5. Error Scenarios:
- Network timeout: Retry 3 l·∫ßn v·ªõi exponential backoff
- Invalid card: Hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng
- Gateway down: Fallback sang gateway d·ª± ph√≤ng

### 6. Security Considerations:
- PCI DSS compliance
- Tokenization c·ªßa th√¥ng tin th·∫ª
- 3D Secure authentication
- Fraud detection integration

**Ticket ID**: {}
"#,
                    request.ticket_id
                )
            }
            _ => {
                format!(
                    r#"
## üìä Ph√¢n t√≠ch Business Flow

### Context: {}
### C√¢u h·ªèi: {}

### Ph√¢n t√≠ch chi ti·∫øt:

T√¥i ƒë√£ ph√¢n t√≠ch code trong context `{}` ƒë·ªÉ hi·ªÉu business flow li√™n quan ƒë·∫øn c√¢u h·ªèi: "{}".

#### **Business Flow ch√≠nh:**

1. **Input Processing**
   - Validation v√† preprocessing d·ªØ li·ªáu ƒë·∫ßu v√†o
   - Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√† authorization

2. **Core Logic**
   - X·ª≠ l√Ω business logic ch√≠nh
   - Data transformation v√† calculations

3. **Data Persistence**
   - L∆∞u tr·ªØ d·ªØ li·ªáu v√†o database
   - Cache management v√† optimization

4. **Response & Error Handling**
   - Format response cho client
   - X·ª≠ l√Ω errors v√† edge cases

#### **C√°c ƒëi·ªÉm quan tr·ªçng:**
- ‚ö†Ô∏è Ki·ªÉm tra input validation rules k·ªπ c√†ng
- üîí X·ª≠ l√Ω authorization v√† permissions
- ‚ö° Performance considerations (N+1 queries, caching)
- üõ°Ô∏è Security implications (injection attacks, XSS)

#### **Test Cases ƒë·ªÅ xu·∫•t:**
‚úÖ Happy path scenarios v·ªõi data h·ª£p l·ªá
‚úÖ Error handling scenarios (invalid input, network errors)
‚úÖ Edge cases v√† boundary conditions
‚úÖ Performance testing v·ªõi large datasets
‚úÖ Security testing (injection, authentication bypass)
‚úÖ Concurrent access scenarios

#### **Recommendations:**
1. Th√™m comprehensive error logging
2. Implement rate limiting n·∫øu l√† API endpoint
3. Add metrics v√† monitoring
4. Review security implications

**Ticket ID**: {}
"#,
                    request.code_context,
                    request.question,
                    request.code_context,
                    request.question,
                    request.ticket_id
                )
            }
        }
    }

    // This method would be used for real Cursor Agent integration
    #[allow(dead_code)]
    async fn execute_real_cursor_agent(
        &self,
        request: &CodeAnalysisRequest,
        msg_store: &Arc<MsgStore>,
        _normalizer: &LogNormalizer,
    ) -> Result<String> {
        let prompt = self.create_analysis_prompt(request);

        // Spawn Cursor Agent process
        let mut child = Command::new("cursor-agent")
            .arg("--prompt")
            .arg(&prompt)
            .arg("--context")
            .arg(&request.code_context)
            .stdout(std::process::Stdio::piped())
            .stderr(std::process::Stdio::piped())
            .spawn()?;

        let stdout = child.stdout.take().unwrap();
        let stderr = child.stderr.take().unwrap();

        let ticket_id = request.ticket_id.clone();
        let msg_store_clone = msg_store.clone();
        let normalizer_clone = LogNormalizer::new();

        // Spawn task to capture stdout
        let stdout_handle = tokio::spawn(async move {
            let reader = BufReader::new(stdout);
            let mut lines = reader.lines();

            while let Ok(Some(line)) = lines.next_line().await {
                let entry = normalizer_clone.normalize(line, ticket_id.clone());
                msg_store_clone.push(entry).await;
            }
        });

        // Spawn task to capture stderr
        let stderr_ticket_id = request.ticket_id.clone();
        let stderr_msg_store = msg_store.clone();
        let stderr_normalizer = LogNormalizer::new();

        let stderr_handle = tokio::spawn(async move {
            let reader = BufReader::new(stderr);
            let mut lines = reader.lines();

            while let Ok(Some(line)) = lines.next_line().await {
                let error_line = format!("ERROR: {}", line);
                let entry = stderr_normalizer.normalize(error_line, stderr_ticket_id.clone());
                stderr_msg_store.push(entry).await;
            }
        });

        // Wait for process to complete
        let status = child.wait().await?;

        // Wait for log capture to complete
        let _ = tokio::join!(stdout_handle, stderr_handle);

        if !status.success() {
            return Err(anyhow::anyhow!("Cursor Agent process failed"));
        }

        Ok("Analysis completed".to_string())
    }

    fn create_analysis_prompt(&self, request: &CodeAnalysisRequest) -> String {
        format!(
            r#"
B·∫°n l√† m·ªôt AI assistant chuy√™n ph√¢n t√≠ch source code ƒë·ªÉ gi√∫p QA hi·ªÉu business flow.

CONTEXT:
- File/Module: {}
- C√¢u h·ªèi c·ªßa QA: {}

Y√äU C·∫¶U:
1. Ph√¢n t√≠ch code trong context tr√™n
2. Gi·∫£i th√≠ch business flow m·ªôt c√°ch d·ªÖ hi·ªÉu
3. Ch·ªâ ra c√°c ƒëi·ªÉm quan tr·ªçng QA c·∫ßn ch√∫ √Ω
4. ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ n·∫øu c√≥ th·ªÉ
5. ƒê·ªÅ xu·∫•t test cases c·∫ßn ki·ªÉm tra
6. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát

H√£y tr·∫£ l·ªùi chi ti·∫øt v√† h·ªØu √≠ch cho QA.
"#,
            request.code_context, request.question
        )
    }
}
